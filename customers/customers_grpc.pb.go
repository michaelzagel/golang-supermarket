// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: customers/customers.proto

package customers

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomersClient is the client API for Customers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersClient interface {
	Register(ctx context.Context, in *RegisterInput, opts ...grpc.CallOption) (*RegisterOutput, error)
	GetInfo(ctx context.Context, in *GetInfoInput, opts ...grpc.CallOption) (*GetInfoOutput, error)
	VerifyPassword(ctx context.Context, in *VerifyPasswordInput, opts ...grpc.CallOption) (*VerifyPasswordOutput, error)
}

type customersClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersClient(cc grpc.ClientConnInterface) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) Register(ctx context.Context, in *RegisterInput, opts ...grpc.CallOption) (*RegisterOutput, error) {
	out := new(RegisterOutput)
	err := c.cc.Invoke(ctx, "/customers.Customers/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetInfo(ctx context.Context, in *GetInfoInput, opts ...grpc.CallOption) (*GetInfoOutput, error) {
	out := new(GetInfoOutput)
	err := c.cc.Invoke(ctx, "/customers.Customers/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) VerifyPassword(ctx context.Context, in *VerifyPasswordInput, opts ...grpc.CallOption) (*VerifyPasswordOutput, error) {
	out := new(VerifyPasswordOutput)
	err := c.cc.Invoke(ctx, "/customers.Customers/VerifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersServer is the server API for Customers service.
// All implementations must embed UnimplementedCustomersServer
// for forward compatibility
type CustomersServer interface {
	Register(context.Context, *RegisterInput) (*RegisterOutput, error)
	GetInfo(context.Context, *GetInfoInput) (*GetInfoOutput, error)
	VerifyPassword(context.Context, *VerifyPasswordInput) (*VerifyPasswordOutput, error)
	mustEmbedUnimplementedCustomersServer()
}

// UnimplementedCustomersServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServer struct {
}

func (UnimplementedCustomersServer) Register(context.Context, *RegisterInput) (*RegisterOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCustomersServer) GetInfo(context.Context, *GetInfoInput) (*GetInfoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedCustomersServer) VerifyPassword(context.Context, *VerifyPasswordInput) (*VerifyPasswordOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedCustomersServer) mustEmbedUnimplementedCustomersServer() {}

// UnsafeCustomersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServer will
// result in compilation errors.
type UnsafeCustomersServer interface {
	mustEmbedUnimplementedCustomersServer()
}

func RegisterCustomersServer(s grpc.ServiceRegistrar, srv CustomersServer) {
	s.RegisterService(&Customers_ServiceDesc, srv)
}

func _Customers_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customers.Customers/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).Register(ctx, req.(*RegisterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customers.Customers/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetInfo(ctx, req.(*GetInfoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customers.Customers/VerifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).VerifyPassword(ctx, req.(*VerifyPasswordInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Customers_ServiceDesc is the grpc.ServiceDesc for Customers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customers.Customers",
	HandlerType: (*CustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Customers_Register_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Customers_GetInfo_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _Customers_VerifyPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customers/customers.proto",
}
